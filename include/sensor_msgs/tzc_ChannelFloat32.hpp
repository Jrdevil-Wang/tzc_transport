// Generated by tzc_gencpp from file sensor_msgs/ChannelFloat32.msg
// DO NOT EDIT!


#ifndef TZC_SENSOR_MSGS_MESSAGE_CHANNELFLOAT32_HPP
#define TZC_SENSOR_MSGS_MESSAGE_CHANNELFLOAT32_HPP


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <tzc_transport/tzc_topic.hpp>
#include <tzc_transport/tzc_object.hpp>
#include <tzc_transport/tzc_vector.hpp>


namespace tzc_transport {
namespace sensor_msgs {

struct ChannelFloat32_ {

  typedef std::string _name_type;
  _name_type name;

  typedef vector< float > _values_type;
  _values_type values;

}; // struct ChannelFloat32_

class ChannelFloat32 : public ChannelFloat32_, public BaseMsg {
private:
  // used by publisher, calculate required length of shared memory
  size_t getLength() {
    size_t res = 0;
    res += sizeof(float) * values.size_;
    return res;
  }
  // used by publisher & subscriber, fill the pointer of tzc_transport::vector with shared memory address
  void fillArray(long handle, ShmMessage * shmmsg) {
    if (shmmsg_)
      shmmsg_->release();

    handle_ = handle;
    shmmsg_ = shmmsg;

    void * tmp = (void *)(shmmsg_ + 1);
    values.ptr_ = (float *)tmp;
    tmp = (void *)(values.ptr_ + values.size_);
  }

public:
  friend class Publisher< ChannelFloat32 >;
  friend class SubscriberCallbackHelper< ChannelFloat32 >;

  typedef boost::shared_ptr< ChannelFloat32 > Ptr;
  typedef boost::shared_ptr< ChannelFloat32 const > ConstPtr;

}; // class ChannelFloat32

typedef boost::shared_ptr< ChannelFloat32 > ChannelFloat32Ptr;
typedef boost::shared_ptr< ChannelFloat32 const > ChannelFloat32ConstPtr;

} // namespace sensor_msgs
} // namespace tzc_transport

namespace ros {
namespace message_traits {



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <>
struct IsFixedSize< ::tzc_transport::sensor_msgs::ChannelFloat32 >
  : FalseType {
};

template <>
struct IsFixedSize< ::tzc_transport::sensor_msgs::ChannelFloat32 const>
  : FalseType {
};

template <>
struct IsMessage< ::tzc_transport::sensor_msgs::ChannelFloat32 >
  : TrueType {
};

template <>
struct IsMessage< ::tzc_transport::sensor_msgs::ChannelFloat32 const>
  : TrueType {
};

template <>
struct HasHeader< ::tzc_transport::sensor_msgs::ChannelFloat32 >
  : FalseType {
};

template <>
struct HasHeader< ::tzc_transport::sensor_msgs::ChannelFloat32 const>
  : FalseType {
};


template <>
struct MD5Sum< ::tzc_transport::sensor_msgs::ChannelFloat32 > {
  static const char * value() {
    return "3d40139cdd33dfedcb71ffeeeb42ae7f";
  }

  static const char * value(const ::tzc_transport::sensor_msgs::ChannelFloat32 &) {
    return value();
  }
  static const uint64_t static_value1 = 0x3d40139cdd33dfedULL;
  static const uint64_t static_value2 = 0xcb71ffeeeb42ae7fULL;
};

template <>
struct DataType< ::tzc_transport::sensor_msgs::ChannelFloat32 > {
  static const char * value() {
    return "sensor_msgs/ChannelFloat32";
  }

  static const char * value(const ::tzc_transport::sensor_msgs::ChannelFloat32 &) {
    return value();
  }
};

template <>
struct Definition< ::tzc_transport::sensor_msgs::ChannelFloat32 > {
  static const char * value() {
    return "# This message is used by the PointCloud message to hold optional data\n\
# associated with each point in the cloud. The length of the values\n\
# array should be the same as the length of the points array in the\n\
# PointCloud, and each value should be associated with the corresponding\n\
# point.\n\
\n\
# Channel names in existing practice include:\n\
#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n\
#              This is opposite to usual conventions but remains for\n\
#              historical reasons. The newer PointCloud2 message has no\n\
#              such problem.\n\
#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n\
#           (R,G,B) values packed into the least significant 24 bits,\n\
#           in order.\n\
#   \"intensity\" - laser or pixel intensity.\n\
#   \"distance\"\n\
\n\
# The channel name should give semantics of the channel (e.g.\n\
# \"intensity\" instead of \"value\").\n\
string name\n\
\n\
# The values array should be 1-1 with the elements of the associated\n\
# PointCloud.\n\
float32[] values\n\
";
  }

  static const char * value(const ::tzc_transport::sensor_msgs::ChannelFloat32 &) {
    return value();
  }
};

} // namespace message_traits
} // namespace ros

namespace ros {
namespace serialization {

  template <> struct Serializer< ::tzc_transport::sensor_msgs::ChannelFloat32_ > {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m) {
      stream.next(m.name);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // class ChannelFloat32_

  template <> struct Serializer< ::tzc_transport::sensor_msgs::ChannelFloat32 > {
    template <typename Stream, typename T> inline static void allInOne(Stream & stream, T m) {
      stream.next(*(::tzc_transport::sensor_msgs::ChannelFloat32_ *)&m);
      stream.next(*(::tzc_transport::BaseMsg *)&m);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // class ChannelFloat32

} // namespace serialization
} // namespace ros

#endif // TZC_SENSOR_MSGS_MESSAGE_CHANNELFLOAT32_HPP

