// Generated by tzc_gencpp from file sensor_msgs/PointCloud.msg
// DO NOT EDIT!


#ifndef TZC_SENSOR_MSGS_MESSAGE_POINTCLOUD_HPP
#define TZC_SENSOR_MSGS_MESSAGE_POINTCLOUD_HPP


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <tzc_transport/tzc_topic.hpp>
#include <tzc_transport/tzc_object.hpp>
#include <tzc_transport/tzc_vector.hpp>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point32.h>
#include <sensor_msgs/tzc_ChannelFloat32.hpp>

namespace tzc_transport {
namespace sensor_msgs {

struct PointCloud_ {

  typedef ::std_msgs::Header _header_type;
  _header_type header;

  typedef vector< ::geometry_msgs::Point32 > _points_type;
  _points_type points;

  typedef std::vector< ::tzc_transport::sensor_msgs::ChannelFloat32_ > _channels_type;
  _channels_type channels;

}; // struct PointCloud_

class PointCloud : public PointCloud_, public BaseMsg {
private:
  // used by publisher, calculate required length of shared memory
  size_t getLength() {
    size_t res = 0;
    res += sizeof(::geometry_msgs::Point32) * points.size_;
    for (auto & _iter_channels : channels) {
      res += sizeof(float) * _iter_channels.values.size_;
    }
    return res;
  }
  // used by publisher & subscriber, fill the pointer of tzc_transport::vector with shared memory address
  void fillArray(long handle, ShmMessage * shmmsg) {
    if (shmmsg_)
      shmmsg_->release();

    handle_ = handle;
    shmmsg_ = shmmsg;

    void * tmp = (void *)(shmmsg_ + 1);
    points.ptr_ = (::geometry_msgs::Point32 *)tmp;
    tmp = (void *)(points.ptr_ + points.size_);
    for (auto & _iter_channels : channels) {
      _iter_channels.values.ptr_ = (float *)tmp;
      tmp = (void *)(_iter_channels.values.ptr_ + _iter_channels.values.size_);
    }
  }

public:
  friend class Publisher< PointCloud >;
  friend class SubscriberCallbackHelper< PointCloud >;

  typedef boost::shared_ptr< PointCloud > Ptr;
  typedef boost::shared_ptr< PointCloud const > ConstPtr;

}; // class PointCloud

typedef boost::shared_ptr< PointCloud > PointCloudPtr;
typedef boost::shared_ptr< PointCloud const > PointCloudConstPtr;

} // namespace sensor_msgs
} // namespace tzc_transport

namespace ros {
namespace message_traits {



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <>
struct IsFixedSize< ::tzc_transport::sensor_msgs::PointCloud >
  : FalseType {
};

template <>
struct IsFixedSize< ::tzc_transport::sensor_msgs::PointCloud const>
  : FalseType {
};

template <>
struct IsMessage< ::tzc_transport::sensor_msgs::PointCloud >
  : TrueType {
};

template <>
struct IsMessage< ::tzc_transport::sensor_msgs::PointCloud const>
  : TrueType {
};

template <>
struct HasHeader< ::tzc_transport::sensor_msgs::PointCloud >
  : TrueType {
};

template <>
struct HasHeader< ::tzc_transport::sensor_msgs::PointCloud const>
  : TrueType {
};


template <>
struct MD5Sum< ::tzc_transport::sensor_msgs::PointCloud > {
  static const char * value() {
    return "d8e9c3f5afbdd8a130fd1d2763945fca";
  }

  static const char * value(const ::tzc_transport::sensor_msgs::PointCloud &) {
    return value();
  }
  static const uint64_t static_value1 = 0xd8e9c3f5afbdd8a1ULL;
  static const uint64_t static_value2 = 0x30fd1d2763945fcaULL;
};

template <>
struct DataType< ::tzc_transport::sensor_msgs::PointCloud > {
  static const char * value() {
    return "sensor_msgs/PointCloud";
  }

  static const char * value(const ::tzc_transport::sensor_msgs::PointCloud &) {
    return value();
  }
};

template <>
struct Definition< ::tzc_transport::sensor_msgs::PointCloud > {
  static const char * value() {
    return "# This message holds a collection of 3d points, plus optional additional\n\
# information about each point.\n\
\n\
# Time of sensor data acquisition, coordinate frame ID.\n\
Header header\n\
\n\
# Array of 3d points. Each Point32 should be interpreted as a 3d point\n\
# in the frame given in the header.\n\
geometry_msgs/Point32[] points\n\
\n\
# Each channel should have the same number of elements as points array,\n\
# and the data in each channel should correspond 1:1 with each point.\n\
# Channel names in common practice are listed in ChannelFloat32.msg.\n\
ChannelFloat32[] channels\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: sensor_msgs/ChannelFloat32\n\
# This message is used by the PointCloud message to hold optional data\n\
# associated with each point in the cloud. The length of the values\n\
# array should be the same as the length of the points array in the\n\
# PointCloud, and each value should be associated with the corresponding\n\
# point.\n\
\n\
# Channel names in existing practice include:\n\
#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n\
#              This is opposite to usual conventions but remains for\n\
#              historical reasons. The newer PointCloud2 message has no\n\
#              such problem.\n\
#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n\
#           (R,G,B) values packed into the least significant 24 bits,\n\
#           in order.\n\
#   \"intensity\" - laser or pixel intensity.\n\
#   \"distance\"\n\
\n\
# The channel name should give semantics of the channel (e.g.\n\
# \"intensity\" instead of \"value\").\n\
string name\n\
\n\
# The values array should be 1-1 with the elements of the associated\n\
# PointCloud.\n\
float32[] values\n\
";
  }

  static const char * value(const ::tzc_transport::sensor_msgs::PointCloud &) {
    return value();
  }
};

} // namespace message_traits
} // namespace ros

namespace ros {
namespace serialization {

  template <> struct Serializer< ::tzc_transport::sensor_msgs::PointCloud_ > {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m) {
      stream.next(m.header);
      stream.next(m.points);
      stream.next(m.channels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // class PointCloud_

  template <> struct Serializer< ::tzc_transport::sensor_msgs::PointCloud > {
    template <typename Stream, typename T> inline static void allInOne(Stream & stream, T m) {
      stream.next(*(::tzc_transport::sensor_msgs::PointCloud_ *)&m);
      stream.next(*(::tzc_transport::BaseMsg *)&m);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // class PointCloud

} // namespace serialization
} // namespace ros

#endif // TZC_SENSOR_MSGS_MESSAGE_POINTCLOUD_HPP

